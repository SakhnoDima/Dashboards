import {
  __commonJS
} from "./chunk-CEQRFMJQ.js";

// node_modules/@highcharts/dashboards/modules/layout.js
var require_layout = __commonJS({
  "node_modules/@highcharts/dashboards/modules/layout.js"(exports, module) {
    !/**
    * Highcharts Dashboards Layout 2.0.0 (2024-03-13)
    *
    * (c) 2009-2024 Highsoft AS
    *
    * License: www.highcharts.com/license
    */
    function(t) {
      "object" == typeof module && module.exports ? (t.default = t, module.exports = t) : "function" == typeof define && define.amd ? define("dashboards/modules/layout", ["dashboards"], function(e) {
        return t(e), t.Dashboards = e, t;
      }) : t("undefined" != typeof Dashboards ? Dashboards : void 0);
    }(function(t) {
      "use strict";
      var e = t ? t._modules : {};
      function s(t2, e2, s2, i) {
        t2.hasOwnProperty(e2) || (t2[e2] = i.apply(null, s2), "function" == typeof CustomEvent && window.dispatchEvent(new CustomEvent("DashboardsModuleLoaded", { detail: { path: e2, module: t2[e2] } })));
      }
      s(e, "Dashboards/EditMode/EditRenderer.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Core/Utilities.js"]], function(t2, e2) {
        let { merge: s2, createElement: i, defined: o } = e2;
        function n(e3, s3) {
          let o2;
          let n2 = s3.options.contextMenu;
          return n2 && (o2 = i("button", { className: t2.classNames.contextMenuBtn, onclick: function(t3) {
            t3.stopPropagation(), s3.onContextBtnClick();
          } }, {}, e3), n2.icon && i("img", { src: n2.icon, className: t2.classNames.icon }, {}, o2), n2.text && i("span", { className: t2.classNames.contextMenuBtnText, textContent: n2.text }, {}, o2), o2.setAttribute("aria-label", s3.lang.accessibility.contextMenu.button), o2.setAttribute("aria-expanded", "false")), o2;
        }
        function l(e3, s3) {
          let { name: o2, showToggle: n2, onchange: l2, isEnabled: a2, isNested: d2, lang: c2 } = s3, h2 = i("div", { className: t2.classNames[d2 ? "accordionNestedWrapper" : "accordionContainer"] + " " + t2.classNames.collapsableContentHeader }, {}, e3), p2 = i("div", { className: t2.classNames.accordionHeader }, {}, h2), u2 = i("button", { className: t2.classNames.accordionHeaderBtn }, {}, p2);
          i("span", { textContent: c2[o2] || o2 }, {}, u2), n2 && r(p2, { enabledOnOffLabels: true, id: o2, name: "", onchange: l2, value: a2 || false, lang: c2 });
          let m2 = i("span", { className: t2.classNames.accordionHeaderIcon + " " + t2.classNames.collapsedElement }, {}, u2), b = i("div", { className: t2.classNames.accordionContent + " " + t2.classNames.hiddenElement }, {}, h2);
          return u2.addEventListener("click", function() {
            b.classList.toggle(t2.classNames.hiddenElement), m2.classList.toggle(t2.classNames.collapsedElement);
          }), { outerElement: h2, content: b };
        }
        function a(o2, n2) {
          let l2;
          if (!o2)
            return;
          n2.name && d(o2, { title: n2.name, isLabel: true });
          let a2 = n2.iconsURLPrefix || "", r2 = i("div", { className: t2.classNames.dropdown + " " + t2.classNames.collapsableContentHeader }, {}, o2), c2 = i("button", { className: t2.classNames.dropdownButton }, {}, r2), h2 = i("div", { className: t2.classNames.dropdownButtonContent }, {}, c2), p2 = (e2.find(n2.selectOptions, (t3) => t3.name === n2.value) || {}).iconURL;
          p2 && (l2 = i("img", { src: a2 + p2, className: t2.classNames.icon }, {}, h2));
          let u2 = i("span", { textContent: n2.value, id: n2.id || "" }, {}, h2), m2 = i("img", { className: t2.classNames.dropdownIcon + " " + t2.classNames.collapsedElement, src: a2 + "dropdown-pointer.svg" }, {}, c2), b = i("ul", { className: t2.classNames.dropdownContent + " " + t2.classNames.hiddenElement }, {}, r2);
          c2.addEventListener("click", function() {
            b.classList.toggle(t2.classNames.hiddenElement), m2.classList.toggle(t2.classNames.collapsedElement);
          });
          for (let e3 = 0, o3 = n2.selectOptions.length; e3 < o3; ++e3)
            (function(e4, s3, o4, n3, l3, a3, r3) {
              let d2 = e4.iconsURLPrefix + e4.iconURL, c3 = i("li", {}, {}, s3), h3 = i("button", { className: t2.classNames.customSelectButton }, {}, c3);
              e4.iconURL && i("img", { src: d2 }, {}, h3), i("span", { textContent: e4.name || "" }, {}, h3), h3.addEventListener("click", function() {
                if (s3.classList.add(t2.classNames.hiddenElement), l3.classList.toggle(t2.classNames.collapsedElement), o4.textContent = e4.name || "", a3 && e4.iconURL && (a3.src = d2), r3)
                  return r3(e4.name);
              });
            })(s2(n2.selectOptions[e3] || {}, { iconsURLPrefix: a2 }), b, u2, n2.id, m2, l2, n2.onchange);
          return r2;
        }
        function r(e3, s3) {
          if (!e3)
            return;
          let o2 = s3.lang, n2 = s3.value, l2 = s3.title || s3.name, a2 = s3.langKey, r2 = i("button", { className: t2.classNames.toggleContainer, type: "button", role: "switch", ariaChecked: false, ariaLabel: a2 ? o2.accessibility[a2][s3.name] : "" }, {}, e3);
          l2 && d(r2, { title: l2 }), s3.enabledOnOffLabels && d(r2, { title: o2.off, className: t2.classNames.toggleLabels });
          let c2 = i("label", { className: t2.classNames.toggleWrapper + " " + (s3.className || "") }, {}, r2), h2 = u(c2, n2), p2 = s3.onchange;
          p2 && r2.addEventListener("click", (t3) => {
            p2(!h2.checked), h2.checked = !h2.checked, r2.setAttribute("aria-checked", h2.checked), t3.stopPropagation();
          });
          let m2 = i("span", { className: t2.classNames.toggleSlider }, {}, c2);
          return p2 && m2.addEventListener("click", (t3) => {
            t3.preventDefault();
          }), s3.enabledOnOffLabels && d(r2, { title: o2.on, className: t2.classNames.toggleLabels }), r2;
        }
        function d(e3, s3) {
          let o2;
          let { title: n2, className: l2, isLabel: a2 } = s3;
          if (e3) {
            let s4 = a2 ? { htmlFor: n2 } : {};
            o2 = i(a2 ? "label" : "div", { className: t2.classNames.labelText + " " + (l2 || ""), textContent: n2, ...s4 }, {}, e3);
          }
          return o2;
        }
        function c(t3, e3) {
          let { icon: s3, callback: o2 } = e3;
          if (!t3)
            return;
          let n2 = i("div", { onclick: o2, className: e3.className || "" }, {}, t3);
          n2.style["background-image"] = "url(" + s3 + ")";
          let l2 = e3.mousedown, a2 = e3.click;
          return l2 && (n2.onmousedown = function() {
            l2.apply(this, arguments);
          }), a2 && n2.addEventListener("click", function() {
            a2.apply(this, arguments);
          }), n2;
        }
        function h(t3, e3) {
          if (!t3)
            return;
          e3.name && d(t3, { title: e3.name, isLabel: true });
          let s3 = i("input", { type: "text", onclick: e3.callback, id: e3.id || "", name: e3.name || "", value: o(e3.value) && e3.value.toString().replace(/\"/g, "") || "" }, {}, t3), n2 = e3.onchange;
          return n2 && s3.addEventListener("change", function(t4) {
            n2(t4.target.value);
          }), s3;
        }
        function p(t3, e3) {
          if (!t3)
            return;
          e3.name && d(t3, { title: e3.name, isLabel: true });
          let s3 = i("textarea", { id: e3.id, name: e3.name, value: e3.value || "" }, {}, t3), o2 = e3.onchange;
          return o2 && s3.addEventListener("change", function(t4) {
            o2(t4.target.value);
          }), s3;
        }
        function u(t3, e3) {
          let s3;
          return t3 && (s3 = i("input", { type: "checkbox", checked: !!e3 }, {}, t3)), s3;
        }
        function m(e3, s3) {
          let o2;
          if (e3)
            return o2 = i("button", { className: t2.classNames.button + " " + (s3.className || ""), onclick: s3.callback, textContent: s3.text }, s3.style || {}, e3), s3.icon && (o2.style["background-image"] = "url(" + s3.icon + ")"), o2;
        }
        return { renderSelect: a, renderToggle: r, renderText: d, renderCollapseHeader: l, renderIcon: c, renderContextButton: n, renderInput: h, renderTextarea: p, renderCheckbox: u, renderButton: m, getRendererFunction: function(t3) {
          return { select: a, toggle: r, text: d, collapse: l, icon: c, contextButton: n, input: h, textarea: p, checkbox: u, button: m }[t3];
        } };
      }), s(e, "Dashboards/EditMode/Menu/MenuItem.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Core/Utilities.js"], e["Dashboards/EditMode/EditRenderer.js"]], function(t2, e2, s2) {
        let { createElement: i, merge: o } = e2;
        class n {
          constructor(t3, e3) {
            this.menu = t3, this.isActive = false, this.options = o(n.defaultOptions, e3), this.container = this.setContainer(), this.innerElement = this.setInnerElement();
          }
          setContainer() {
            let e3 = this.options, s3 = t2.classNames.menuItem;
            return this.menu.options.itemsClassName && (s3 += " " + this.menu.options.itemsClassName), e3.className && (s3 += " " + e3.className), i("div", { className: s3 || "" }, o(this.options.style || {}, this.isActive ? { display: "block" } : {}), this.menu.container);
          }
          setInnerElement() {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            let t3 = this.options, e3 = this.container, i2 = t3.langKey;
            return "toggle" === t3.type ? s2.renderToggle(e3, { id: t3.id, name: t3.id, title: i2 ? this.menu.editMode.lang[i2] : t3.text, value: !!(t3.getValue && t3.getValue(this)), lang: this.menu.editMode.lang, langKey: i2, onchange: (_b = (_a = t3.events) == null ? void 0 : _a.click) == null ? void 0 : _b.bind(this) }) : "text" === t3.type ? s2.renderText(e3, { title: i2 ? this.menu.editMode.lang[i2] : t3.text || "", className: t3.className || "" }) : "icon" === t3.type ? s2.renderIcon(e3, { icon: t3.icon || "", mousedown: (_d = (_c = t3.events) == null ? void 0 : _c.onmousedown) == null ? void 0 : _d.bind(this), click: (_f = (_e = t3.events) == null ? void 0 : _e.click) == null ? void 0 : _f.bind(this) }) : "button" === t3.type ? s2.renderButton(e3, { callback: (_h = (_g = t3.events) == null ? void 0 : _g.click) == null ? void 0 : _h.bind(this), className: t3.className || "", style: t3.style || {}, text: i2 ? this.menu.editMode.lang[i2] : t3.text || "" }) : void 0;
          }
          update() {
            let t3 = this.options;
            t3.events && t3.events.update && t3.events.update.apply(this, arguments);
          }
          activate() {
            this.update(), this.container && (this.isActive = true, this.container.style.display = "block");
          }
          deactivate() {
            this.container && (this.isActive = false, this.container.style.display = "none");
          }
        }
        return n.defaultOptions = { id: "", type: "text" }, n;
      }), s(e, "Dashboards/EditMode/Menu/MenuItemBindings.js", [], function() {
        return { viewFullscreen: { id: "viewFullscreen", type: "button", langKey: "viewFullscreen", events: { click: function() {
          let t2 = this.menu.editMode.board.fullscreen;
          t2 && t2.toggle();
        } } } };
      }), s(e, "Dashboards/EditMode/Menu/Menu.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Core/Utilities.js"], e["Dashboards/EditMode/Menu/MenuItem.js"], e["Dashboards/EditMode/Menu/MenuItemBindings.js"]], function(t2, e2, s2, i) {
        let { createElement: o, merge: n } = e2;
        class l {
          constructor(t3, e3, s3, i2) {
            this.parentElement = t3, this.isVisible = false, this.activeItems = [], this.options = e3, this.items = {}, this.editMode = s3, i2 && (this.parent = i2), this.container = this.setContainer();
          }
          setContainer() {
            return o("div", { className: t2.classNames.menu + " " + (this.options.className || "") }, {}, this.parentElement);
          }
          initItems(t3, e3) {
            let i2, o2, l2, a;
            let r = this.options.items || [];
            for (let d = 0, c = r.length; d < c; ++d)
              i2 = "string" == typeof (o2 = r[d]) ? t3[o2] : o2.id ? t3[o2.id] : {}, (a = "string" == typeof o2 ? n(i2, { id: o2 }) : n(i2, o2)).id && (l2 = new s2(this, a), this.items[l2.options.id] = l2, e3 && (l2.activate(), this.activeItems.push(l2)));
          }
          setActiveItems(t3) {
            let e3;
            for (let e4 = 0, s3 = this.activeItems.length; e4 < s3; ++e4)
              -1 === t3.indexOf(this.activeItems[e4].options.id) && this.activeItems[e4].deactivate();
            this.activeItems.length = 0;
            for (let s3 = 0, i2 = t3.length; s3 < i2; ++s3)
              (e3 = this.items[t3[s3]]) && (e3.isActive ? e3.update() : e3.activate(), this.activeItems.push(e3));
          }
          deactivateActiveItems() {
            for (let t3 = 0, e3 = this.activeItems.length; t3 < e3; ++t3)
              this.activeItems[t3].deactivate();
          }
          updateActiveItems() {
            let t3 = this.activeItems;
            for (let e3 = 0, s3 = t3.length; e3 < s3; ++e3)
              t3[e3].update();
          }
          destroy() {
            this.activeItems.length = 0, this.container.remove(), this.items = {}, this.options = {};
          }
        }
        return l.items = i, l;
      }), s(e, "Dashboards/EditMode/Toolbar/EditToolbar.js", [e["Core/Utilities.js"], e["Dashboards/EditMode/Menu/Menu.js"]], function(t2, e2) {
        let { defined: s2, createElement: i, css: o } = t2;
        return class {
          constructor(t3, s3) {
            this.container = i("div", { className: s3.className }, void 0, t3.board.container), this.editMode = t3, this.iconURLPrefix = t3.iconsURLPrefix, this.menu = new e2(this.container, s3.menu, t3, this), this.options = s3, this.isVisible = false, this.options.outline && (this.outline = i("div", { className: s3.outlineClassName }, void 0, this.container));
          }
          hide() {
            this.setPosition(void 0, void 0);
          }
          refreshOutline(t3, e3, s3, i2 = 0) {
            let n = (s3 || {}).container;
            this.outline && n && o(this.outline, { display: "block", left: t3 - i2 + "px", top: e3 - i2 + "px", width: n.offsetWidth + 2 * i2 + "px", height: n.offsetHeight + 2 * i2 + "px" });
          }
          hideOutline() {
            this.outline && (this.outline.style.display = "none");
          }
          setPosition(t3, e3) {
            this.container && o(this.container, { left: (t3 || "-9999") + "px", top: (e3 || "-9999") + "px" }), this.isVisible = s2(t3) && s2(e3);
          }
        };
      }), s(e, "Dashboards/EditMode/Toolbar/CellEditToolbar.js", [e["Core/Utilities.js"], e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/EditMode/Toolbar/EditToolbar.js"], e["Dashboards/Layout/GUIElement.js"]], function(t2, e2, s2, i) {
        let { merge: o, fireEvent: n, objectEach: l } = t2;
        class a extends s2 {
          static getItemsConfig(t3, s3) {
            var _a, _b;
            let i2 = [];
            return ((_a = t3.dragDrop) == null ? void 0 : _a.enabled) && i2.push({ id: "drag", type: "icon", icon: s3 + "drag.svg", events: { onmousedown: function(t4) {
              let e3 = this.menu.parent, s4 = e3.editMode.dragDrop;
              s4 && e3.cell && s4.onDragStart(t4, e3.cell);
            } } }), ((_b = t3.settings) == null ? void 0 : _b.enabled) && i2.push({ id: "settings", type: "icon", icon: s3 + "settings.svg", events: { click: function() {
              this.menu.parent.editMode.setEditOverlay(), this.menu.parent.onCellOptions();
            } } }), i2.push({ id: "destroy", type: "icon", className: e2.classNames.menuDestroy, icon: s3 + "destroy.svg", events: { click: function() {
              let t4 = this.menu.parent, e3 = this.menu.parent.editMode, s4 = e3.confirmationPopup;
              s4.show({ confirmButton: { value: e3.lang.confirmButton, callback: t4.onCellDestroy, context: t4 }, cancelButton: { value: e3.lang.cancelButton, callback: () => {
                s4.closePopup();
              } }, text: e3.lang.confirmDestroyCell });
            } } }), i2;
          }
          constructor(t3) {
            super(t3, o(a.defaultOptions, (t3.options.toolbars || {}).cell, { menu: { items: a.getItemsConfig(t3.options, t3.iconsURLPrefix) } })), this.menu.initItems({});
          }
          showToolbar(t3) {
            let e3, s3;
            if (t3.container && this.editMode.isActive() && !(this.editMode.dragDrop || {}).isActive) {
              let o2 = i.getOffsets(t3, this.editMode.board.container);
              e3 = o2.right - 30 - 10, s3 = o2.top + 10, l(this.menu.items, (t4) => {
                t4.activate();
              }), this.setPosition(e3, s3), this.cell = t3, this.refreshOutline();
            } else
              this.isVisible && this.hide();
          }
          refreshOutline() {
            this.cell && this.cell.container && this.outline && super.refreshOutline(-this.cell.container.offsetWidth, 0, this.cell, -1);
          }
          onCellOptions() {
            this.editMode.sidebar && (this.editMode.sidebar.show(this.cell), this.cell && this.cell.setHighlight());
          }
          onCellDestroy() {
            if (this.cell) {
              let t3 = this.cell.row;
              this.resetEditedCell(), this.cell.destroy(), this.cell = void 0, this.editMode.hideToolbars(["cell", "row"]), t3 && t3.cells && t3.cells.length && (n(this.editMode.board, "cellResize", { cell: t3.cells[0] }), n(t3, "cellChange", { cell: t3.cells[0], row: t3 }));
            }
          }
          resetEditedCell() {
            this.editedCell = void 0;
          }
        }
        return a.defaultOptions = { enabled: true, className: e2.classNames.editToolbar, outline: false, outlineClassName: e2.classNames.editToolbarCellOutline, menu: { className: e2.classNames.editToolbarCell, itemsClassName: e2.classNames.editToolbarItem, items: [] } }, a;
      }), s(e, "Dashboards/EditMode/Toolbar/RowEditToolbar.js", [e["Core/Utilities.js"], e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/EditMode/Toolbar/EditToolbar.js"], e["Dashboards/Layout/GUIElement.js"]], function(t2, e2, s2, i) {
        let { merge: o, objectEach: n } = t2;
        class l extends s2 {
          static getMenuItemsConfig(t3, s3) {
            var _a, _b;
            let i2 = [];
            return ((_a = t3.dragDrop) == null ? void 0 : _a.enabled) && i2.push({ id: "drag", type: "icon", icon: s3 + "drag.svg", events: { onmousedown: function(t4) {
              let e3 = this.menu.parent, s4 = e3.editMode.dragDrop;
              s4 && e3.row && s4.onDragStart(t4, e3.row);
            } } }), ((_b = t3.settings) == null ? void 0 : _b.enabled) && i2.push({ id: "settings", type: "icon", icon: s3 + "settings.svg", events: { click: function() {
              this.menu.parent.editMode.setEditOverlay(), this.menu.parent.onRowOptions();
            } } }), i2.push({ id: "destroy", type: "icon", className: e2.classNames.menuDestroy, icon: s3 + "destroy.svg", events: { click: function() {
              let t4 = this.menu.parent, e3 = this.menu.parent.editMode, s4 = e3.confirmationPopup;
              s4.show({ confirmButton: { value: e3.lang.confirmButton, callback: t4.onRowDestroy, context: t4 }, cancelButton: { value: e3.lang.cancelButton, callback: () => {
                s4.closePopup();
              } }, text: e3.lang.confirmDestroyRow });
            } } }), i2;
          }
          constructor(t3) {
            super(t3, o(l.defaultOptions, (t3.options.toolbars || {}).row, { menu: { items: l.getMenuItemsConfig(t3.options, t3.iconsURLPrefix) } })), this.menu.initItems({});
          }
          refreshOutline(t3, e3) {
            this.row && this.row.container && super.refreshOutline(t3, e3, this.row, 2);
          }
          showToolbar(t3) {
            let e3, s3, o2;
            if (t3.container && this.editMode.isActive() && !(this.editMode.dragDrop || {}).isActive) {
              let l2 = i.getOffsets(t3, this.editMode.board.container), a = l2.right - l2.left;
              n(this.menu.items, (t4) => {
                t4.activate();
              }), o2 = a / 2 - this.container.clientWidth / 2, e3 = l2.left + o2, s3 = l2.top - this.container.clientHeight, this.setPosition(e3, s3), this.row = t3, this.refreshOutline(-o2, this.container.clientHeight);
            } else
              this.isVisible && this.hide();
          }
          onRowOptions() {
            this.editMode.sidebar && this.editMode.sidebar.show(this.row);
          }
          onRowDestroy() {
            this.row && (this.resetEditedRow(), this.row.destroy(), this.row = void 0, this.editMode.hideToolbars(["cell", "row"]));
          }
          resetEditedRow() {
            this.editedRow = void 0;
          }
        }
        return l.defaultOptions = { enabled: true, className: e2.classNames.editToolbar, outline: true, outlineClassName: e2.classNames.editToolbarRowOutline, menu: { className: e2.classNames.editToolbarRow, itemsClassName: e2.classNames.editToolbarItem, items: [] } }, l;
      }), s(e, "Dashboards/EditMode/AccordionMenu.js", [e["Dashboards/EditMode/EditRenderer.js"], e["Core/Utilities.js"], e["Dashboards/EditMode/EditGlobals.js"]], function(t2, e2, s2) {
        let { createElement: i, merge: o, error: n } = e2;
        return class {
          constructor(t3, e3) {
            this.changedOptions = {}, this.chartOptionsJSON = {}, this.iconsURLPrefix = t3, this.closeSidebar = e3;
          }
          renderContent(e3, n2) {
            var _a, _b, _c;
            let l, a;
            let r = this, d = n2.editableOptions.getOptions(), c = i("div", { className: s2.classNames.accordionMenu }, {}, e3);
            for (let e4 = 0, i2 = d.length; e4 < i2; e4++)
              l = d[e4], a = t2.renderCollapseHeader(c, { name: l.name, iconsURLPrefix: r.iconsURLPrefix, lang: (((_a = n2.board) == null ? void 0 : _a.editMode) || s2).lang }).content, this.renderAccordion(l, a, n2);
            let h = i("div", { className: s2.classNames.accordionMenuButtonsContainer }, {}, c);
            t2.renderButton(h, { text: (((_b = n2.board) == null ? void 0 : _b.editMode) || s2).lang.confirmButton, className: s2.classNames.popupConfirmBtn, callback: () => {
              let t3 = this.changedOptions;
              n2.update(o(t3, { chartOptions: this.chartOptionsJSON })), r.changedOptions = {}, r.chartOptionsJSON = {}, r.closeSidebar();
            } }), t2.renderButton(h, { text: (((_c = n2.board) == null ? void 0 : _c.editMode) || s2).lang.cancelButton, className: s2.classNames.popupCancelBtn, callback: () => {
              r.changedOptions = {}, r.chartOptionsJSON = {}, r.closeSidebar();
            } });
          }
          updateOptions(t3, e3) {
            let s3 = t3.length - 1, i2 = this.changedOptions;
            if (0 === s3 && "chartOptions" === t3[0])
              try {
                let t4 = JSON.parse(e3);
                this.chartOptionsJSON = t4;
              } catch (t4) {
                n("Dashboards Error: Wrong JSON config structure passed as a chart options.");
              }
            for (let e4 = 0; e4 < s3; e4++) {
              let s4 = t3[e4];
              i2[s4] || (i2[s4] = {}), i2 = i2[s4];
            }
            i2[t3[s3]] = e3;
          }
          renderAccordion(e3, s3, i2) {
            if ("nested" === e3.type)
              return this.renderNested(s3, e3, i2);
            let o2 = t2.getRendererFunction(e3.type);
            o2 && o2(s3, { ...e3, iconsURLPrefix: this.iconsURLPrefix, value: i2.getEditableOptionValue(e3.propertyPath), onchange: (t3) => this.updateOptions(e3.propertyPath || [], t3) });
          }
          renderNested(e3, i2, o2) {
            var _a;
            if (!e3 || !i2.nestedOptions)
              return;
            let n2 = i2.nestedOptions;
            for (let i3 = 0, l = n2.length; i3 < l; ++i3) {
              let l2 = n2[i3].name, a = n2[i3].options, r = !!n2[i3].showToggle, d = n2[i3].propertyPath || [], c = t2.renderCollapseHeader(e3, { name: l2, isEnabled: !!o2.getEditableOptionValue(d), iconsURLPrefix: this.iconsURLPrefix, showToggle: r, onchange: (t3) => this.updateOptions(d, t3), isNested: true, lang: (((_a = o2.board) == null ? void 0 : _a.editMode) || s2).lang });
              for (let t3 = 0, e4 = a.length; t3 < e4; ++t3)
                this.renderAccordion(a[t3], c.content, o2);
            }
          }
        };
      }), s(e, "Shared/BaseForm.js", [e["Core/Renderer/HTML/AST.js"], e["Core/Utilities.js"]], function(t2, e2) {
        let { addEvent: s2, createElement: i } = e2;
        return class {
          constructor(t3, e3) {
            this.iconsURL = e3, this.container = this.createPopupContainer(t3), this.closeButton = this.addCloseButton();
          }
          createPopupContainer(t3, e3 = "highcharts-popup highcharts-no-tooltip") {
            return i("div", { className: e3 }, void 0, t3);
          }
          addCloseButton(t3 = "highcharts-popup-close") {
            let e3 = this, o = this.iconsURL, n = i("button", { className: t3 }, void 0, this.container);
            return n.style["background-image"] = "url(" + (o.match(/png|svg|jpeg|jpg|gif/ig) ? o : o + "close.svg") + ")", ["click", "touchstart"].forEach((t4) => {
              s2(n, t4, e3.closeButtonEvents.bind(e3));
            }), s2(document, "keydown", function(t4) {
              "Escape" === t4.code && e3.closeButtonEvents();
            }), n;
          }
          closeButtonEvents() {
            this.closePopup();
          }
          showPopup(e3 = "highcharts-annotation-toolbar") {
            let s3 = this.container, i2 = this.closeButton;
            this.type = void 0, s3.innerHTML = t2.emptyHTML, s3.className.indexOf(e3) >= 0 && (s3.classList.remove(e3), s3.removeAttribute("style")), s3.appendChild(i2), s3.style.display = "block", s3.style.height = "";
          }
          closePopup() {
            this.container.style.display = "none";
          }
        };
      }), s(e, "Dashboards/EditMode/SidebarPopup.js", [e["Dashboards/EditMode/AccordionMenu.js"], e["Shared/BaseForm.js"], e["Dashboards/Actions/Bindings.js"], e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/EditMode/EditRenderer.js"], e["Dashboards/Layout/GUIElement.js"], e["Dashboards/Layout/Layout.js"], e["Core/Utilities.js"]], function(t2, e2, s2, i, o, n, l, a) {
        let { addEvent: r, createElement: d, merge: c } = a;
        class h extends e2 {
          constructor(e3, s3, i2) {
            var _a;
            super(e3, s3), this.options = { components: ["HTML", "layout", "Highcharts", "DataGrid", "KPI"] }, this.isVisible = false, this.componentsList = [], this.editMode = i2, this.options = c(this.options, ((_a = i2.options.toolbars) == null ? void 0 : _a.sidebar) || {}), this.componentsList = this.getComponentsList(this.options.components || []), this.accordionMenu = new t2(this.iconsURL, this.hide.bind(this));
          }
          detectRightSidebar(t3) {
            let e3 = this.editMode.board.layoutsWrapper;
            return !!e3 && n.getOffsets(t3, e3).left < e3.offsetWidth / 2 - 10;
          }
          removeClassNames() {
            let t3 = i.classNames, e3 = this.container.classList;
            e3.remove(t3.editSidebarShow), e3.remove(t3.editSidebarRightShow);
          }
          addClassNames(t3) {
            let e3 = this.container.classList;
            t3 ? e3.add(i.classNames.editSidebarRight) : e3.remove(i.classNames.editSidebarRight), setTimeout(() => {
              e3.add(i.classNames[t3 ? "editSidebarRightShow" : "editSidebarShow"]);
            });
          }
          show(t3) {
            let e3 = this.editMode, s3 = !!(t3 && this.detectRightSidebar(t3));
            this.showPopup(i.classNames.editSidebarShow), this.addClassNames(s3), e3.resizer && e3.resizer.disableResizer(), e3.editCellContext && e3.editCellContext.row && e3.editCellContext.row.setHighlight(true), e3.hideToolbars(["cell", "row"]), e3.stopContextDetection(), this.isVisible = true, this.generateContent(t3);
          }
          generateContent(t3) {
            if (this.renderHeader(t3 ? this.editMode.lang.settings : this.editMode.lang.addComponent, ""), !t3) {
              this.renderAddComponentsList();
              return;
            }
            if ("cell" === t3.getType()) {
              let e3 = t3.mountedComponent;
              if (!e3)
                return;
              this.accordionMenu.renderContent(this.container, e3);
            }
          }
          renderAddComponentsList() {
            let t3;
            let e3 = this, s3 = this.componentsList, o2 = d("div", { className: i.classNames.editGridItems }, {}, e3.container);
            for (let i2 = 0, a2 = s3.length; i2 < a2; ++i2)
              (t3 = d("div", {}, {}, o2)).addEventListener("mousedown", (t4) => {
                if (e3.editMode.dragDrop) {
                  let o3 = () => {
                    e3.hide();
                  };
                  e3.container.addEventListener("mouseleave", o3), e3.editMode.dragDrop.onDragStart(t4, void 0, (t5) => {
                    var _a, _b;
                    if (0 === this.editMode.board.layouts.length) {
                      let e4 = this.editMode.board, s4 = new l(e4, { id: n.createElementId("layout"), copyId: "", parentContainerId: e4.container.id, rows: [{}], style: {} });
                      s4 && e4.layouts.push(s4), t5 = s4.rows[0];
                    }
                    let a3 = s3[i2].onDrop(e3, t5);
                    if (a3) {
                      let t6 = a3.mountedComponent;
                      ((_b = (_a = t6.options) == null ? void 0 : _a.connector) == null ? void 0 : _b.id) && t6.initConnector(), e3.editMode.setEditCellContext(a3), e3.show(a3), a3.setHighlight();
                    }
                    e3.container.removeEventListener("mouseleave", o3);
                  });
                }
              }), t3.innerHTML = s3[i2].text;
          }
          onDropNewComponent(t3, e3) {
            let i2 = this.editMode.dragDrop;
            if (i2) {
              let o2 = ("cell" === t3.getType() ? t3.row : t3).addCell({ id: n.createElementId("col") });
              i2.onCellDragEnd(o2);
              let l2 = c(e3, { cell: o2.id });
              return s2.addComponent(l2, this.editMode.board, o2), this.editMode.setEditOverlay(), o2;
            }
          }
          hide() {
            let t3 = this.editMode, e3 = t3.editCellContext;
            this.removeClassNames(), this.container.style.display = "none", t3.isEditOverlayActive && t3.setEditOverlay(true), e3 && e3.row && (t3.showToolbars(["cell", "row"], e3), e3.row.setHighlight(), e3.isHighlighted && e3.setHighlight(true)), t3.isContextDetectionActive = true, this.isVisible = false;
          }
          closeButtonEvents() {
            this.hide();
          }
          renderHeader(t3, e3) {
            let s3 = o.renderIcon(this.container, { icon: e3, className: i.classNames.editSidebarTitle });
            s3 && (s3.textContent = t3);
          }
          getComponentsList(t3) {
            let e3 = this.editMode, s3 = e3.board.componentTypes, i2 = [];
            return t3.forEach((t4) => {
              var _a;
              let o2 = s3[t4];
              o2 ? i2.push({ text: ((_a = e3.lang) == null ? void 0 : _a.sidebar[t4]) || o2.name, onDrop: function(t5, e4) {
                let s4 = o2.prototype.getOptionsOnDrop(t5);
                if (s4)
                  return t5.onDropNewComponent(e4, s4);
              } }) : "layout" === t4 && i2.push(h.addLayout);
            }), i2;
          }
          addCloseButton(t3 = i.classNames.popupCloseButton) {
            return r(document, "click", (t4) => {
              t4.stopPropagation(), "block" === this.container.style.display && !this.container.contains(t4.target) && this.container.classList.value.includes("show") && this.hide();
            }), super.addCloseButton.call(this, t3);
          }
          createPopupContainer(t3, e3 = i.classNames.editSidebar) {
            return super.createPopupContainer.call(this, t3, e3);
          }
        }
        return h.addLayout = { text: "layout", onDrop: function(t3, e3) {
          if (!e3)
            return;
          let i2 = ("cell" === e3.getType() ? e3.row : e3).layout.board, o2 = n.createElementId("layout"), a2 = n.createElementId("cell"), r2 = new l(i2, { id: o2, copyId: "", parentContainerId: i2.container.id, rows: [{ cells: [{ id: a2 }] }], style: {} });
          r2 && i2.layouts.push(r2), s2.addComponent({ type: "HTML", cell: a2, elements: [{ tagName: "div", textContent: "Placeholder text" }] }, i2);
        } }, h;
      }), s(e, "Dashboards/EditMode/EditContextMenu.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Core/Utilities.js"], e["Dashboards/EditMode/Menu/Menu.js"]], function(t2, e2, s2) {
        let { addEvent: i, merge: o } = e2;
        class n extends s2 {
          constructor(t3, e3, s3) {
            var _a;
            if (super(s3.board.container, o(n.defaultOptions, e3 || {}), s3), this.editMode = s3, this.options = o(n.defaultOptions, e3 || {}), (_a = this.editMode.board.layoutsWrapper) == null ? void 0 : _a.parentNode.insertBefore(this.container, this.editMode.board.layoutsWrapper), this.container.style.width = this.options.width + "px", super.initItems(n.items), this.options.items) {
              let t4 = [];
              for (let e4 = 0, s4 = this.options.items.length; e4 < s4; ++e4)
                "string" == typeof this.options.items[e4] ? t4.push(this.options.items[e4]) : this.options.items[e4].id && t4.push(this.options.items[e4].id);
              this.setActiveItems(t4);
            }
            this.initEvents();
          }
          initEvents() {
            let e3 = this;
            i(document, "click", (s3) => {
              s3.target !== this.container && s3.target !== e3.editMode.tools.contextButtonElement && !s3.target.classList.contains(t2.classNames.toggleSlider) && "INPUT" !== s3.target.tagName && this.isVisible && this.setVisible(false);
            });
          }
          setVisible(t3) {
            let e3 = this.editMode.tools.contextButtonElement;
            this.container && e3 && (t3 ? (this.container.style.display = "block", this.isVisible = true, e3.setAttribute("aria-expanded", "true")) : (this.container.style.display = "none", this.isVisible = false, e3.setAttribute("aria-expanded", "false")));
          }
          updatePosition(t3, e3, s3) {
            let i2 = this.options.width || 0, o2 = t3 ? t3.offsetLeft - i2 + t3.offsetWidth : e3, n2 = t3 ? t3.offsetTop + t3.offsetHeight : s3;
            o2 && n2 && (this.container.style.left = o2 + "px", this.container.style.top = n2 + "px");
          }
        }
        return n.defaultOptions = { enabled: true, width: 150, className: t2.classNames.contextMenu, itemsClassName: t2.classNames.contextMenuItem, items: ["editMode"] }, n.items = o(s2.items, { editMode: { id: "editMode", type: "toggle", getValue: function(t3) {
          return t3.menu.editMode.isActive();
        }, langKey: "editMode", events: { click: function() {
          this.menu.editMode.onEditModeToggle();
        } } } }), n;
      }), s(e, "Dashboards/Actions/ContextDetection.js", [e["Core/Utilities.js"], e["Dashboards/Layout/GUIElement.js"]], function(t2, e2) {
        let { defined: s2 } = t2;
        class i {
          static isGUIElementOnParentEdge(t3, e3) {
            let s3 = "top" === e3 || "bottom" === e3 ? t3.row.layout.getVisibleRows() : "left" === e3 || "right" === e3 ? t3.row.getVisibleCells() : [], i2 = s3.length - 1;
            return s3[i2] === t3 && "right" === e3 || s3[i2] === t3.row && "bottom" === e3 || s3[0] === t3 && "left" === e3 || s3[0] === t3.row && "top" === e3;
          }
          static getContextLevel(t3, e3, s3, i2) {
            let o = t3.getOverlappingLevels(i2, e3 / 2), n = e3 / o.length, l = o[o.length - 1], a = t3.row.layout.level - Math.floor(s3 / n);
            return a < l ? l : a > t3.row.layout.level ? t3.row.layout.level : a;
          }
          static getContext(t3, o, n) {
            let l;
            let a = e2.getOffsets(t3), { width: r, height: d } = e2.getDimFromOffsets(a);
            r < 2 * n && (n = r / 2);
            let c = o.clientX - a.left, h = o.clientY - a.top, p = h >= -n && h <= n ? "top" : h - d >= -n && h - d <= n ? "bottom" : "", u = (c >= -n && c <= n ? "left" : c - r >= -n && c - r <= n ? "right" : "") || p;
            switch (u) {
              case "right":
                l = c - r + n;
                break;
              case "left":
                l = n - c;
                break;
              case "top":
                l = n - h;
                break;
              case "bottom":
                l = h - d + n;
            }
            let m = { cell: t3, side: u };
            if (0 !== t3.row.layout.level && u && i.isGUIElementOnParentEdge(t3, u) && s2(l)) {
              let e3 = i.getContextLevel(t3, n, l, u), s3 = t3.getParentCell(e3);
              s3 && (m.cell = s3);
            }
            return m;
          }
        }
        return i;
      }), s(e, "Dashboards/Actions/DragDrop.js", [e["Core/Utilities.js"], e["Dashboards/Globals.js"], e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/Layout/GUIElement.js"], e["Dashboards/Actions/ContextDetection.js"]], function(t2, e2, s2, i, o) {
        let { addEvent: n, merge: l, css: a, fireEvent: r, createElement: d } = t2;
        class c {
          constructor(t3, e3) {
            this.editMode = t3, this.options = l(c.defaultOptions, e3), this.mockElement = d("div", { className: s2.classNames.dragMock }, {}, t3.board.container), this.dropPointer = { isVisible: false, align: "", element: d("div", { className: s2.classNames.dropPointer }, {}, t3.board.container) }, this.isActive = false, this.initEvents();
          }
          showDropPointer(t3, e3, s3, i2) {
            this.dropPointer.isVisible = true, a(this.dropPointer.element, { display: "block", left: t3 + "px", top: e3 + "px", height: i2 + "px", width: s3 + "px" });
          }
          hideDropPointer() {
            this.dropPointer.isVisible && (this.dropPointer.isVisible = false, this.dropPointer.align = "", this.dropPointer.element.style.display = "none");
          }
          setMockElementPosition(t3) {
            let e3 = this.editMode.board.container.getBoundingClientRect(), s3 = this.mockElement.clientWidth / 2, i2 = t3.clientX - e3.left - s3, o2 = t3.clientY - e3.top - s3;
            a(this.mockElement, { left: i2 + "px", top: o2 + "px" });
          }
          initEvents() {
            n(document, "mousemove", this.onDrag.bind(this)), n(document, "mouseup", this.onDragEnd.bind(this));
          }
          onDragStart(t3, s3, i2) {
            this.isActive = true, this.editMode.hideToolbars(["cell", "row"]), this.editMode.resizer && this.editMode.resizer.disableResizer(), this.setMockElementPosition(t3), s3 ? (this.context = s3, s3.hide(), s3.getType() === e2.guiElementType.cell && (r(this.editMode.board, "cellResize", { cell: s3 }), r(s3.row, "cellChange", { cell: s3, row: s3.row }))) : i2 && (this.dragEndCallback = i2), a(this.mockElement, { cursor: "grabbing", display: "block" });
          }
          onDrag(t3) {
            this.isActive && (t3.preventDefault(), this.setMockElementPosition(t3), this.context ? this.context.getType() === e2.guiElementType.cell ? this.onCellDrag(t3) : this.context.getType() === e2.guiElementType.row && this.onRowDrag(t3) : this.dragEndCallback && this.onCellDrag(t3));
          }
          onDragEnd() {
            this.isActive && (this.isActive = false, a(this.mockElement, { cursor: "grab", display: "none" }), this.context ? (this.context.getType() === e2.guiElementType.cell ? this.onCellDragEnd() : this.context.getType() === e2.guiElementType.row && this.onRowDragEnd(), this.context = void 0, this.editMode.editCellContext && (this.editMode.showToolbars(["row", "cell"], this.editMode.editCellContext), this.editMode.resizer && this.editMode.resizer.setSnapPositions(this.editMode.editCellContext))) : this.dragEndCallback && (this.dragEndCallback(this.dropContext), this.dragEndCallback = void 0, this.hideDropPointer()));
          }
          onRowDrag(t3, e3) {
            let s3 = this.mouseCellContext, n2 = this.options.dropPointerSize || 0, l2 = this.options.rowDropOffset || 0, a2 = false;
            if (s3) {
              let r2 = e3 || o.getContext(s3, t3, l2), d2 = r2.side;
              if ((this.dropPointer.align !== d2 || this.dropContext !== r2.cell.row) && (a2 = true, this.dropPointer.align = d2, this.dropContext = r2.cell.row), d2) {
                let t4 = i.getOffsets(this.dropContext, this.editMode.board.container), { width: e4, height: s4 } = i.getDimFromOffsets(t4);
                (!this.dropPointer.isVisible || a2) && this.showDropPointer(t4.left, t4.top + ("bottom" === this.dropPointer.align ? s4 : 0) - n2 / 2, e4, n2);
              } else
                this.dropContext = void 0, this.hideDropPointer();
            }
          }
          onRowDragEnd() {
            let t3 = this.context, e3 = this.dropContext;
            this.dropPointer.align && (t3.layout.unmountRow(t3), 0 === t3.layout.rows.length && t3.layout.destroy(), e3.layout.mountRow(t3, (e3.layout.getRowIndex(e3) || 0) + ("bottom" === this.dropPointer.align ? 1 : 0)), t3.cells[0] && (r(this.editMode.board, "cellResize", { cell: t3.cells[0] }), r(t3, "cellChange", { cell: t3.cells[0], row: t3 }))), this.hideDropPointer(), t3.show();
          }
          onCellDrag(t3, e3) {
            let s3 = this.mouseCellContext, i2 = this.options.cellDropOffset || 0;
            s3 || e3 ? this.onCellDragCellCtx(t3, e3 || o.getContext(s3, t3, i2)) : this.mouseRowContext && this.onCellDragRowCtx(t3, this.mouseRowContext);
          }
          onCellDragCellCtx(t3, e3) {
            let s3 = this.options.dropPointerSize || 0, o2 = e3.side, n2 = false;
            if ((this.dropPointer.align !== o2 || this.dropContext !== e3.cell) && (n2 = true, this.dropPointer.align = o2, this.dropContext = e3.cell), "right" === o2 || "left" === o2) {
              let e4 = i.getOffsets(this.dropContext, this.editMode.board.container), { width: l2, height: a2 } = i.getDimFromOffsets(e4);
              if (!this.dropPointer.isVisible || n2) {
                let i2 = this.dropContext.row.getRowLevelInfo(t3.clientY), n3 = i2 ? i2.rowLevel.bottom - i2.rowLevel.top : a2;
                this.showDropPointer(e4.left + ("right" === o2 ? l2 : 0) - s3 / 2, e4.top, s3, n3);
              }
            } else if ("top" === o2 || "bottom" === o2) {
              let s4 = i.getOffsets(this.dropContext), n3 = this.dropContext.row.getRowLevelInfo(s4.top);
              n3 && (0 === n3.index && "top" === o2 || n3.index === n3.rowLevels.length - 1 && "bottom" === o2) && this.onRowDrag(t3, e3);
            } else
              this.dropContext = void 0, this.hideDropPointer();
          }
          onCellDragRowCtx(t3, e3) {
            let s3, o2;
            let n2 = this.options.dropPointerSize || 0, l2 = i.getOffsets(e3), a2 = e3.getRowLevelInfo(t3.clientY);
            if (a2)
              for (let e4 = 0, r2 = a2.rowLevel.cells.length; e4 < r2; ++e4) {
                s3 = a2.rowLevel.cells[e4], o2 = i.getOffsets(s3);
                let { width: d2, height: c2 } = i.getDimFromOffsets(o2), h = this.editMode.board.container.getBoundingClientRect(), p = a2.rowLevel.bottom - a2.rowLevel.top;
                if (s3.isVisible) {
                  if (c2 < 0.8 * p && o2.left <= t3.clientX && o2.right >= t3.clientX)
                    o2.top > t3.clientY || o2.bottom < t3.clientY && (this.showDropPointer(o2.left - h.left, o2.top - h.top + c2, d2, p - c2), this.dropPointer.align = "nestedBottom", this.dropContext = s3), e4 = r2;
                  else if (0 === e4 && o2.left > t3.clientX || e4 === r2 - 1 && o2.right < t3.clientX) {
                    if (o2.left > t3.clientX)
                      ;
                    else if (o2.right < t3.clientX) {
                      let i2 = l2.right - o2.right;
                      this.showDropPointer(o2.left + (0 === e4 && o2.left > t3.clientX ? 0 : d2) - n2 / 2 - h.left, o2.top - h.top, i2 > n2 ? i2 : n2, p || c2), this.dropPointer.align = "right", this.dropContext = s3;
                    }
                    e4 = r2;
                  }
                } else
                  s3.isVisible || s3 !== this.context || (this.dropContext = void 0, this.hideDropPointer());
              }
          }
          onCellDragEnd(t3) {
            let s3 = t3 || this.context, o2 = this.dropContext;
            if (this.dropPointer.align && o2 && s3) {
              if (s3.row.unmountCell(s3), 0 === s3.row.cells.length && s3.row.destroy(), ("top" === this.dropPointer.align || "bottom" === this.dropPointer.align) && o2.getType() === e2.guiElementType.row)
                o2.layout.addRow({}, void 0, (o2.layout.getRowIndex(o2) || 0) + ("bottom" === this.dropPointer.align ? 1 : 0)).mountCell(s3, 0);
              else if ("nestedBottom" === this.dropPointer.align && o2.getType() === e2.guiElementType.cell) {
                let t4 = o2.row, e3 = t4.getCellIndex(o2);
                t4.unmountCell(o2);
                let n2 = t4.addCell({ id: i.createElementId("col-nested-"), layout: { rows: [{}, {}] } }, void 0, e3);
                n2.nestedLayout && (n2.nestedLayout.rows[0].mountCell(o2), n2.nestedLayout.rows[1].mountCell(s3));
              } else
                o2.getType() === e2.guiElementType.cell && o2.row.mountCell(s3, (o2.row.getCellIndex(o2) || 0) + ("right" === this.dropPointer.align ? 1 : 0));
            }
            r(this.editMode.board, "cellResize", { cell: s3 }), r(s3.row, "cellChange", { cell: s3, row: s3.row }), this.hideDropPointer(), s3.show();
          }
        }
        return c.defaultOptions = { enabled: true, rowDropOffset: 30, cellDropOffset: 30, dropPointerSize: 16 }, c;
      }), s(e, "Dashboards/Actions/Resizer.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/Layout/GUIElement.js"], e["Core/Utilities.js"]], function(t2, e2, s2) {
        let { merge: i, addEvent: o, createElement: n, fireEvent: l, removeEvent: a } = s2;
        class r {
          static fromJSON(t3, e3) {
            return new r(t3, e3.options);
          }
          constructor(t3, e3) {
            this.editMode = t3, this.options = i({}, r.defaultOptions, t3.options.resize, e3), this.currentCell = void 0, this.isX = this.options.type.indexOf("x") > -1, this.isY = this.options.type.indexOf("y") > -1, this.isActive = false, this.startX = 0, this.tempSiblingsWidth = [], this.addSnaps();
          }
          addSnaps() {
            let e3 = this.editMode.iconsURLPrefix, s3 = this.options.snap.width || 0, i2 = this.options.snap.height || 0, o2 = this.editMode.board.container;
            this.snapRight = n("img", { className: t2.classNames.resizeSnap + " " + t2.classNames.resizeSnapX, src: e3 + "resize-handle.svg" }, { width: s3 + "px", height: i2 + "px", left: "-9999px" }, o2), this.snapBottom = n("img", { className: t2.classNames.resizeSnap + " " + t2.classNames.resizeSnapY, src: e3 + "resize-handle.svg" }, { width: s3 + "px", height: i2 + "px", top: "-9999px", left: "0px" }, o2), this.addResizeEvents();
          }
          disableResizer() {
            this.isActive = false, this.currentDimension = void 0, this.currentCell = void 0, this.snapRight && (this.snapRight.style.left = "-9999px"), this.snapBottom && (this.snapBottom.style.left = "-9999px");
          }
          setSnapPositions(t3) {
            this.currentCell = t3;
            let s3 = e2.getOffsets(t3, this.editMode.board.container), i2 = s3.left || 0, o2 = s3.top || 0, { width: n2, height: l2 } = e2.getDimFromOffsets(s3), a2 = this.options.snap.width || 0, r2 = this.options.snap.height || 0;
            this.snapRight && (this.snapRight.style.left = i2 + n2 - a2 + "px", this.snapRight.style.top = o2 + l2 / 2 - r2 / 2 + "px"), this.snapBottom && (this.snapBottom.style.top = o2 + l2 - r2 + "px", this.snapBottom.style.left = i2 + n2 / 2 - a2 / 2 + "px");
          }
          setTempWidthSiblings() {
            let t3 = this.currentCell;
            if (t3) {
              let s3, i2;
              let o2 = e2.getOffsets(t3), n2 = t3.row.getRowLevelInfo(o2.top), l2 = n2 && n2.rowLevel.cells || [];
              for (let e3 = 0, o3 = l2.length; e3 < o3 && (s3 = (i2 = l2[e3]).container, i2 !== t3); ++e3)
                s3 && (s3.style.flex = "0 0 " + s3.offsetWidth + "px", this.tempSiblingsWidth.push(i2));
            }
          }
          revertSiblingsAutoWidth() {
            let t3, e3;
            let s3 = this.tempSiblingsWidth;
            for (let i2 = 0, o2 = s3.length; i2 < o2; ++i2)
              (t3 = s3[i2].container) && (t3.style.flex = "1 1 0%", e3 = s3[i2]);
            this.tempSiblingsWidth = [], e3 && (l(this.editMode.board, "cellResize", { cell: e3 }), l(e3.row, "cellChange", { cell: e3, row: e3.row }));
          }
          addResizeEvents() {
            let t3, e3, s3, i2;
            let n2 = this;
            n2.mouseDownSnapX = t3 = function(t4) {
              n2.isActive = true, n2.currentDimension = "x", n2.editMode.hideToolbars(["row", "cell"]), n2.setTempWidthSiblings(), n2.startX = t4.clientX;
            }, n2.mouseDownSnapY = e3 = function() {
              n2.isActive = true, n2.currentDimension = "y", n2.editMode.hideToolbars(["row", "cell"]);
            }, n2.mouseMoveSnap = s3 = function(t4) {
              n2.isActive && n2.onMouseMove(t4);
            }, n2.mouseUpSnap = i2 = function() {
              n2.isActive && (n2.isActive = false, n2.currentDimension = void 0, n2.revertSiblingsAutoWidth(), n2.editMode.showToolbars(["row", "cell"], n2.currentCell), n2.currentCell && n2.setSnapPositions(n2.currentCell));
            }, o(this.snapRight, "mousedown", t3), o(this.snapBottom, "mousedown", e3), o(document, "mousemove", s3), o(document, "mouseup", i2);
            let l2 = () => {
              n2.currentCell && n2.setSnapPositions(n2.currentCell);
            };
            if ("function" == typeof ResizeObserver)
              this.resizeObserver = new ResizeObserver(l2), this.resizeObserver.observe(n2.editMode.board.container);
            else {
              let t4 = o(window, "resize", l2);
              o(this, "destroy", t4);
            }
          }
          onMouseMove(t3) {
            let s3 = this.currentCell, i2 = s3 && s3.container, o2 = this.currentDimension;
            if (s3 && i2 && !((s3.row.layout.board.editMode || {}).dragDrop || {}).isActive) {
              let i3 = e2.getOffsets(s3), { width: n2 } = e2.getDimFromOffsets(e2.getOffsets(s3.row));
              if ("x" === o2) {
                let e3 = Math.min(t3.clientX - i3.left, n2) / n2 * 100 + "%";
                s3.setSize(e3), this.startX = t3.clientX;
              }
              "y" === o2 && s3.setSize(void 0, t3.clientY - i3.top), l(this.editMode.board, "cellResize", { cell: s3 }), l(s3.row, "cellChange", { cell: s3, row: s3.row }), this.setSnapPositions(s3);
            }
          }
          destroy() {
            var _a;
            let t3;
            let e3 = ["snapRight", "snapBottom"];
            a(document, "mousemove"), a(document, "mouseup"), (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this.editMode.board.container);
            for (let s3 = 0, i2 = e3.length; s3 < i2; ++s3)
              a(t3 = this[e3[s3]], "mousedown"), t3.remove();
          }
          toJSON() {
            let t3 = this.options;
            return { $class: "Dashboards.Action.Resizer", options: { enabled: t3.enabled, styles: { minWidth: t3.styles.minWidth, minHeight: t3.styles.minHeight }, type: t3.type, snap: { width: t3.snap.width, height: t3.snap.height } } };
          }
        }
        return r.defaultOptions = { enabled: true, styles: { minWidth: 20, minHeight: 50 }, type: "xy", snap: { width: 9, height: 17 } }, r;
      }), s(e, "Dashboards/EditMode/ConfirmationPopup.js", [e["Core/Utilities.js"], e["Shared/BaseForm.js"], e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/EditMode/EditRenderer.js"]], function(t2, e2, s2, i) {
        let { createElement: o } = t2;
        return class extends e2 {
          constructor(t3, e3, s3, i2) {
            super(t3, e3 = i2 && i2.close && i2.close.icon ? i2.close.icon : e3), this.editMode = s3, this.options = i2;
          }
          createPopupContainer(t3, e3 = s2.classNames.confirmationPopup) {
            return super.createPopupContainer(t3, e3);
          }
          addCloseButton(t3 = s2.classNames.popupCloseButton) {
            return super.addCloseButton(t3);
          }
          renderContent(t3) {
            this.contentContainer = o("div", { className: s2.classNames.popupContentContainer }, {}, this.container);
            let e3 = this.contentContainer.parentNode;
            e3.style.marginTop = "0px";
            let n = e3.getBoundingClientRect().top;
            e3.style.marginTop = (n < 0 ? Math.abs(n - 200) : 200) + "px", i.renderText(this.contentContainer, { title: t3.text || "" }), this.buttonContainer = o("div", { className: s2.classNames.popupButtonContainer }, {}, this.container), i.renderButton(this.buttonContainer, { text: t3.cancelButton.value, className: s2.classNames.popupCancelBtn, callback: t3.cancelButton.callback }), i.renderButton(this.buttonContainer, { text: t3.confirmButton.value, className: s2.classNames.popupConfirmBtn, callback: () => {
              t3.confirmButton.callback.call(t3.confirmButton.context), this.closePopup();
            } });
          }
          show(t3) {
            this.showPopup(), this.renderContent(t3), this.editMode.setEditOverlay();
          }
          closePopup() {
            super.closePopup(), this.editMode.setEditOverlay(true);
          }
        };
      }), s(e, "Dashboards/EditMode/EditMode.js", [e["Dashboards/EditMode/EditGlobals.js"], e["Dashboards/EditMode/EditRenderer.js"], e["Dashboards/EditMode/Toolbar/CellEditToolbar.js"], e["Dashboards/EditMode/Toolbar/RowEditToolbar.js"], e["Dashboards/EditMode/SidebarPopup.js"], e["Dashboards/EditMode/EditContextMenu.js"], e["Dashboards/Actions/DragDrop.js"], e["Dashboards/Actions/Resizer.js"], e["Dashboards/EditMode/ConfirmationPopup.js"], e["Dashboards/Actions/ContextDetection.js"], e["Dashboards/Layout/GUIElement.js"], e["Core/Utilities.js"]], function(t2, e2, s2, i, o, n, l, a, r, d, c, h) {
        let { addEvent: p, createElement: u, css: m, merge: b } = h;
        return class {
          constructor(e3, s3) {
            this.active = false, this.iconsURLPrefix = "https://code.highcharts.com/dashboards/2.0.0/gfx/dashboards-icons/", this.iconsURLPrefix = s3 && s3.iconsURLPrefix || this.iconsURLPrefix, this.options = b({ confirmationPopup: { close: { icon: this.iconsURLPrefix + "close.svg" } }, contextMenu: { icon: this.iconsURLPrefix + "menu.svg" }, dragDrop: { enabled: true }, enabled: true, resize: { enabled: true }, settings: { enabled: true }, toolbars: { cell: { enabled: true }, row: { enabled: true } }, tools: { addComponentBtn: { enabled: true, icon: this.iconsURLPrefix + "add.svg" } } }, s3 || {}), this.board = e3, this.lang = b({}, t2.lang, this.options.lang), this.contextPointer = { isVisible: false, element: u("div", { className: t2.classNames.contextDetectionPointer }, {}, this.board.container) }, this.isInitialized = false, this.isContextDetectionActive = false, this.tools = {}, this.createTools(), this.confirmationPopup = new r(e3.container, this.iconsURLPrefix, this, this.options.confirmationPopup), this.editOverlay = u("div", { className: t2.classNames.editOverlay }, {}, e3.container), this.isEditOverlayActive = false;
          }
          onContextBtnClick() {
            this.tools.contextMenu && (this.tools.contextMenu.isVisible || this.tools.contextMenu.updatePosition(this.tools.contextButtonElement), this.tools.contextMenu.setVisible(!this.tools.contextMenu.isVisible));
          }
          onEditModeToggle() {
            this.active ? this.deactivate() : this.activate();
          }
          init() {
            var _a, _b, _c, _d, _e;
            ((_a = this.options.resize) == null ? void 0 : _a.enabled) && (this.resizer = new a(this, this.options.resize)), this.dragDrop = new l(this, this.options.dragDrop), ((_c = (_b = this.options.toolbars) == null ? void 0 : _b.row) == null ? void 0 : _c.enabled) && !this.rowToolbar && (this.rowToolbar = new i(this)), ((_e = (_d = this.options.toolbars) == null ? void 0 : _d.cell) == null ? void 0 : _e.enabled) && !this.cellToolbar && (this.cellToolbar = new s2(this)), this.sidebar || (this.sidebar = new o(this.board.container, this.iconsURLPrefix, this)), this.isInitialized = true;
          }
          initEvents() {
            let t3 = this, e3 = t3.board;
            for (let s3 = 0, i2 = e3.layouts.length; s3 < i2; ++s3)
              t3.setLayoutEvents(e3.layouts[s3]);
            t3.cellToolbar && (p(t3.cellToolbar.container, "mouseenter", function() {
              t3.stopContextDetection();
            }), p(t3.cellToolbar.container, "mouseleave", function() {
              t3.isContextDetectionActive = true;
            })), t3.rowToolbar && (p(t3.rowToolbar.container, "mouseenter", function() {
              t3.stopContextDetection();
            }), p(t3.rowToolbar.container, "mouseleave", function() {
              t3.isContextDetectionActive = true;
            })), e3.layoutsWrapper && (p(e3.layoutsWrapper, "mousemove", t3.onDetectContext.bind(t3)), p(e3.layoutsWrapper, "click", t3.onContextConfirm.bind(t3)), p(e3.layoutsWrapper, "mouseleave", () => {
              t3.hideContextPointer();
            }));
          }
          setLayoutEvents(t3) {
            for (let e3 = 0, s3 = t3.rows.length; e3 < s3; ++e3) {
              let s4 = t3.rows[e3];
              this.setRowEvents(s4);
              for (let t4 = 0, e4 = s4.cells.length; t4 < e4; ++t4)
                this.setCellEvents(s4.cells[t4]);
            }
          }
          setRowEvents(t3) {
            let e3 = this;
            if (e3.dragDrop) {
              let s3 = e3.dragDrop;
              p(t3.container, "mouseenter", function() {
                e3.isContextDetectionActive && (e3.mouseRowContext = t3);
              }), p(t3.container, "mousemove", function(e4) {
                s3.isActive && e4.target === t3.container && (s3.mouseRowContext = t3);
              }), p(t3.container, "mouseleave", function() {
                s3.isActive && s3.mouseRowContext === t3 && (s3.mouseRowContext = void 0), e3.isContextDetectionActive && (e3.mouseRowContext = void 0);
              });
            }
          }
          setCellEvents(t3) {
            let e3 = this;
            if (t3.nestedLayout)
              e3.setLayoutEvents(t3.nestedLayout);
            else if (e3.cellToolbar && t3.container && (e3.dragDrop || e3.resizer)) {
              let s3 = e3.dragDrop;
              p(t3.container, "mouseenter", function() {
                e3.isContextDetectionActive && (e3.mouseCellContext = t3);
              }), p(t3.container, "mousemove", function(e4) {
                s3 && s3.isActive && e4.target === t3.container && (s3.mouseCellContext = t3, s3.mouseRowContext = void 0);
              }), p(t3.container, "mouseleave", function() {
                s3 && s3.isActive && s3.mouseCellContext === t3 && (s3.mouseCellContext = void 0), e3.isContextDetectionActive && (e3.mouseCellContext = void 0);
              });
            }
          }
          activate() {
            this.isInitialized || (this.init(), this.initEvents()), this.board.container.classList.add(t2.classNames.editModeEnabled), this.addComponentBtn && (this.addComponentBtn.style.display = "block"), this.active = true, this.isContextDetectionActive = true;
          }
          deactivate() {
            var _a;
            this.board.container.classList.remove(t2.classNames.editModeEnabled), this.hideToolbars(), this.editCellContext && ((_a = this.editCellContext.row) == null ? void 0 : _a.setHighlight(true)), this.addComponentBtn && (this.addComponentBtn.style.display = "none"), this.resizer && this.resizer.disableResizer(), this.board.layoutsWrapper && (this.board.layoutsWrapper.style.width = "100%"), this.board.reflow(), this.active = false, this.stopContextDetection(), this.editCellContext = void 0, this.potentialCellContext = void 0;
          }
          isActive() {
            return this.active;
          }
          hideToolbars(t3) {
            let e3 = t3 || ["cell", "row", "sidebar"];
            for (let t4 = 0, s3 = e3.length; t4 < s3; ++t4)
              switch (e3[t4]) {
                case "cell":
                  this.cellToolbar && this.cellToolbar.isVisible && this.cellToolbar.hide();
                  break;
                case "row":
                  this.rowToolbar && this.rowToolbar.isVisible && this.rowToolbar.hide();
                  break;
                case "sidebar":
                  this.sidebar && this.sidebar.isVisible && this.sidebar.hide();
              }
          }
          showToolbars(t3, e3) {
            let s3 = t3 || ["cell", "row", "sidebar"];
            for (let t4 = 0, i2 = s3.length; t4 < i2; ++t4)
              switch (s3[t4]) {
                case "cell":
                  e3 && this.cellToolbar && (this.cellToolbar.isVisible = true, this.cellToolbar.showToolbar(e3));
                  break;
                case "row":
                  e3 && e3.row && this.rowToolbar && (this.rowToolbar.isVisible = true, this.rowToolbar.showToolbar(e3.row));
                  break;
                case "sidebar":
                  this.sidebar && !this.sidebar.isVisible && this.sidebar.show();
              }
          }
          createTools() {
            var _a, _b, _c, _d, _e;
            let s3 = this, i2 = this.options;
            if (this.tools.container = document.createElement("div"), this.tools.container.classList.add(t2.classNames.editTools), (_a = this.board.layoutsWrapper) == null ? void 0 : _a.parentNode.insertBefore(this.tools.container, this.board.layoutsWrapper), i2.contextMenu && i2.contextMenu.enabled && (this.tools.contextButtonElement = e2.renderContextButton(this.tools.container, s3), s3.tools.contextMenu || (s3.tools.contextMenu = new n(s3.board.container, s3.options.contextMenu || {}, s3))), ((_c = (_b = i2.tools) == null ? void 0 : _b.addComponentBtn) == null ? void 0 : _c.enabled) && ((_e = (_d = i2.toolbars) == null ? void 0 : _d.cell) == null ? void 0 : _e.enabled)) {
              let o2 = i2.tools.addComponentBtn.icon;
              this.addComponentBtn = e2.renderButton(this.tools.container, { className: t2.classNames.editToolsBtn, icon: o2, text: this.lang.addComponent, callback: () => {
                s3.sidebar && (s3.sidebar.show(), s3.setEditOverlay());
              }, style: { display: "none" } });
            }
          }
          onDetectContext(t3) {
            if (this.isActive() && this.isContextDetectionActive && (this.mouseCellContext || this.mouseRowContext) && !(this.dragDrop || {}).isActive) {
              let e3;
              if (this.mouseCellContext ? e3 = d.getContext(this.mouseCellContext, t3, 50).cell : this.mouseRowContext && (e3 = this.mouseRowContext.layout.parentCell), this.potentialCellContext = e3, e3) {
                let t4 = c.getOffsets(e3, this.board.container), { width: s3, height: i2 } = c.getDimFromOffsets(t4);
                this.showContextPointer(t4.left, t4.top, s3, i2);
              }
            }
          }
          stopContextDetection() {
            this.isContextDetectionActive = false, this.dragDrop && (this.dragDrop.mouseCellContext = void 0), this.mouseCellContext = void 0, this.hideContextPointer();
          }
          onContextConfirm() {
            this.isContextDetectionActive && this.potentialCellContext && this.editCellContext !== this.potentialCellContext && this.setEditCellContext(this.potentialCellContext, this.editCellContext);
          }
          setEditCellContext(t3, e3) {
            let s3 = e3 && e3.row;
            this.editCellContext = t3, this.showToolbars(["row", "cell"], t3), s3 && s3 === t3.row || (s3 && s3.setHighlight(true), t3.row.setHighlight()), this.resizer && this.resizer.setSnapPositions(t3);
          }
          showContextPointer(t3, e3, s3, i2) {
            this.contextPointer.isVisible = true, m(this.contextPointer.element, { display: "block", left: t3 + "px", top: e3 + "px", height: i2 + "px", width: s3 + "px" });
          }
          hideContextPointer() {
            this.contextPointer.isVisible && (this.contextPointer.isVisible = false, this.contextPointer.element.style.display = "none");
          }
          setEditOverlay(e3) {
            let s3 = this.editOverlay, i2 = s3.classList.contains(t2.classNames.editOverlayActive);
            e3 || i2 ? e3 && i2 && (s3.classList.remove(t2.classNames.editOverlayActive), this.isEditOverlayActive = false) : (s3.classList.add(t2.classNames.editOverlayActive), this.isEditOverlayActive = true);
          }
        };
      }), s(e, "Dashboards/EditMode/Fullscreen.js", [e["Core/Utilities.js"], e["Dashboards/Globals.js"]], function(t2, e2) {
        let { addEvent: s2 } = t2;
        return class {
          constructor(t3) {
            this.isOpen = false, this.board = t3, this.board.boardWrapper.classList.add(e2.classNamePrefix + "-fullscreen");
          }
          toggle() {
            this[this.isOpen ? "close" : "open"]();
          }
          open() {
            if (this.isOpen)
              return;
            let t3 = this, e3 = t3.board, i = s2(e3.boardWrapper.ownerDocument, "fullscreenchange", function() {
              t3.isOpen ? (t3.isOpen = false, t3.close()) : (t3.isOpen = true, t3.setButtonText());
            });
            t3.unbindFullscreenEvent = () => {
              i();
            }, e3.boardWrapper.requestFullscreen().catch(() => {
              throw Error("Full screen is not supported.");
            });
          }
          close() {
            let t3 = this.board;
            this.isOpen && t3.boardWrapper.ownerDocument instanceof Document && t3.boardWrapper.ownerDocument.exitFullscreen(), this.unbindFullscreenEvent && (this.unbindFullscreenEvent = this.unbindFullscreenEvent()), this.isOpen = false, this.setButtonText();
          }
          setButtonText() {
            let t3 = this.board.editMode, e3 = t3 && t3.tools.contextMenu, s3 = e3 && e3.items.viewFullscreen;
            if (s3 && s3.innerElement) {
              let e4 = t3.lang;
              s3.innerElement.innerHTML = (this.isOpen ? e4.exitFullscreen : e4.viewFullscreen) || "";
            }
          }
        };
      }), s(e, "masters/modules/layout.src.js", [e["Dashboards/Globals.js"], e["Dashboards/EditMode/EditMode.js"], e["Dashboards/EditMode/Fullscreen.js"]], function(t2, e2, s2) {
        return t2.EditMode = e2, t2.FullScreen = s2, t2;
      });
    });
  }
});
export default require_layout();
//# sourceMappingURL=@highcharts_dashboards_modules_layout.js.map
